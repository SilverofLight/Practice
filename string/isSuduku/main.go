package main

import "fmt"
//自己写的方法
/*请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

    数字 1-9 在每一行只能出现一次。
    数字 1-9 在每一列只能出现一次。
    数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
注意：

    一个有效的数独（部分已被填充）不一定是可解的。
    只需要根据以上规则，验证已经填入的数字是否有效即可。
    空白格用 '.' 表示。
	输入：board = 
	[["5","3",".",".","7",".",".",".","."]
	,["6",".",".","1","9","5",".",".","."]
	,[".","9","8",".",".",".",".","6","."]
	,["8",".",".",".","6",".",".",".","3"]
	,["4",".",".","8",".","3",".",".","1"]
	,["7",".",".",".","2",".",".",".","6"]
	,[".","6",".",".",".",".","2","8","."]
	,[".",".",".","4","1","9",".",".","5"]
	,[".",".",".",".","8",".",".","7","9"]]
	输出：true
	
	示例 2：
	
	输入：board = 
	[["8","3",".",".","7",".",".",".","."]
	,["6",".",".","1","9","5",".",".","."]
	,[".","9","8",".",".",".",".","6","."]
	,["8",".",".",".","6",".",".",".","3"]
	,["4",".",".","8",".","3",".",".","1"]
	,["7",".",".",".","2",".",".",".","6"]
	,[".","6",".",".",".",".","2","8","."]
	,[".",".",".","4","1","9",".",".","5"]
	,[".",".",".",".","8",".",".","7","9"]]
	输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。*/

func isValidSudoku(board [][]byte) bool {
	//可以做多层循环
	m := make(map[byte]int)
	//每一行可不可行
	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] != '.' {
				m[board[i][j]]++
				if m[board[i][j]] == 2 {
					return false
				}
			}
		}
		for k := 1; k < 10; k++{
			delete(m, byte(k))
		}
	}
	
	//每一列
	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[j][i] != '.' {
				m[board[j][i]]++
				if m[board[j][i]] == 2 {
					return false
				}
			}
		}
		for k := 1; k < 10; k++{
			delete(m,byte(k))
		}
	} 
	//每一格
	for i := 0; i < 9; i += 3 {
		for j := 0; j < 9; j += 3{
			for k := 0; k < 3; k++ {
				for l := 0; l < 3; l++ {
					if board[i+k][j+l] != '.' {
						m[board[i+k][j+l]]++
						if m[board[i+k][j+l]] == 2 {
							return false
						}
					}
				}
			}
			for n := 1; n < 10; n++ {
				delete(m,byte(n))
			}
		}
	}
	return true
}

func main(){
	board := [][]byte{
		{'5','3','2','.','.','.','.','.','.'},
		{'3','5','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
		{'.','.','.','.','.','.','.','.','.'},
	}
	result := isValidSudoku(board)
	fmt.Println(result)
}