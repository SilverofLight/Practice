package main
import "fmt"
/*编写一个程序，通过填充空格来解决数独问题。

数独的解法需 遵循如下规则：

    数字 1-9 在每一行只能出现一次。
    数字 1-9 在每一列只能出现一次。
    数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）

数独部分空格内已填入了数字，空白格用 '.' 表示。
输入：board = [["5","3",".",".","7",".",".",".","."],
				["6",".",".","1","9","5",".",".","."],
				[".","9","8",".",".",".",".","6","."],
				["8",".",".",".","6",".",".",".","3"],
				["4",".",".","8",".","3",".",".","1"],
				["7",".",".",".","2",".",".",".","6"],
				[".","6",".",".",".",".","2","8","."],
				[".",".",".","4","1","9",".",".","5"],
				[".",".",".",".","8",".",".","7","9"]]
输出：[["5","3","4","6","7","8","9","1","2"],
		["6","7","2","1","9","5","3","4","8"],
		["1","9","8","3","4","2","5","6","7"],
		["8","5","9","7","6","1","4","2","3"],
		["4","2","6","8","5","3","7","9","1"],
		["7","1","3","9","2","4","8","5","6"],
		["9","6","1","5","3","7","2","8","4"],
		["2","8","7","4","1","9","6","3","5"],
		["3","4","5","2","8","6","1","7","9"]]*/
//需要使用递归的方法来实现
func solveSudoku(board [][]byte){
	//使用三个数组分别记录数字知否出现过，没出现为false，出现过为true
	var line, colum [9][9]bool
	var block [3][3][9]bool
	var space [][2]int

	//初始化
	for i, row := range board {
		for j, b := range row {
			if b == '.' {
				space = append(space, [2]int{i,j})
			}else {
				digit := b - '1'
				line[i][digit] = true
				colum[j][digit] = true
				block[i/3][j/3][digit] = true
			}
		}
	}

	//定义递归函数
	var dfs func(int) bool

	dfs = func(pos int) bool {
		if pos == len(space) {
			return true
		}
		i,j := space[pos][0], space[pos][1]
		for digit := byte(0); digit < 9; digit++ {
			if !line[i][digit] && !colum[j][digit] && !block[i/3][j/3][digit] {
				line[i][digit] = true
				colum[j][digit] = true
				block[i/3][j/3] = true
				board[i][j] = digit + '1'
				if dfs(pos + 1) {
					return true
				}
				//回溯重置
				line[i][digit] = false
				colum[j][digit] = false
				block[i/3][j/3] = false
			}
		}
		return false
	}
	dfs(0)
}